Cadastros usar a tabela de usuarios do django

python manage.py makemigrations
python manage.py migrate

extensão SQLite Viewer

###############################################
PSW-django\usuarios\templates\cadastro.html
alterar 

<form action="{% url 'cadastro' %}" >
                    <label>Username</label>

para pegar o arquivo 
PSW-django\usuarios\urls.py                  
###############################################
method = GET quando a solicitação vem do navegador 
method = POST quando vem do codigo 

csrf_token é para segurança evitar falsificação
<form action="{% url 'cadastro' %}" method="POST">{%{% csrf_token %}%}

###############################################
PSW-django\usuarios\views.py
def cadastro(request):
    if request.method == "GET":                     ## Se for GEt fica na pagina
        return render(request, 'cadastro.html')
    elif request.method == "POST":                  ## Se for POST retona teste
        return HttpResponse("TESTE")


###############################################
Para import class do banco do django

from django.contrib.auth.models import User

###############################################
Mensages de erro
https://getbootstrap.com/docs/5.0/components/alerts/

editar o 
PSW-django\core\settings.py

## Messages 
from django.contrib.messages import constants

MESSAGE_TAGS = {
    constants.DEBUG: 'alert-primary',
    constants.ERROR: 'alert-danger',
    constants.SUCCESS: 'alert-success',
    constants.INFO: 'alert-info',
    constants.WARNING: 'alert-warning',
}

##############################################################################################
PSW-django\usuarios\views.py

django.contrib.messages import constants
from django.contrib import messages         #para import do PSW-django\core\settings.py
##############################################################################################
Para aparecer o alert no HTML 
PSW-django\usuarios\templates\cadastro.html

{% if messages %}
    {% for message in messages%}
        <!--tag é a tag da message no settig e message é  message do views.py-->
        {{message.tags}} - {{message}}        <!--duas chaves é para dar o print-->
    {%endfor%}
{% endif%}

##############################################################################################
PSW-django\usuarios\views.py
Crio o def do logar

def logar (request):
    if request.method == "GET":
        return render (request, 'logar.html')
    elif request.method == "POST":
        username = request.POST.get('username')
        senha = request.POST.get('senha')

Agr preciso validar no Banco de dados 

utilizo a biblioteca 
from django.contrib import auth

utiliza uma função do django o uth.authenticate
que vai encaminhar para o banco o username e senha 

##############################################################################################
        user = auth.authenticate(request, username=username, password=senha)
        if user:
            auth.login(request, user)
authenticate só busca o usuario no banco
login que vai utilizar para logar 

##############################################################################################
Cria para novo APP 
python manage.py startapp empresarios

em PSW-django\core\settings.py

INSTALLED_APPS = 
adiciona empresarios
##############################################################################################
Criar tabelas no banco 
PSW-django\empresarios\models.py

models serve para entender que um class de banco de dados 
class Empresa (models.Model): 

class Empresa (models.Model): 
    nome = models.CharField(max_length=50)
    cnpj = models.CharField(max_length=50)
    site = models.URLField(max_length=50)
    data_final_cap = models.DateField()

##############################################################################################
PSW-django\empresarios\models.py
pitch = models.FileField(upload_to='pitchs')    #é para fazer o upload de midia

no PSW-django\core\settings.py
ja foi definido 
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
que todas as media será envia para pasta media no diretorio atual
se não tiver criado o django cria 
então ele vai mandar para pasta pitchs dentro da media no diretorio atual 
##############################################################################################
PSW-django\empresarios\models.py
from django.contrib.auth.models import User

    user = models.ForeignKey(User, on_delete=models.DO_NOTHING)

ForeignKey serve para relacionar u usuario como acesso da empresa

##############################################################################################
para criar os arquivos no python
python manage.py makemigrations

para criar as tabelas no banco
python manage.py migrate


##############################################################################################
Por padrão o django cria uma tela de admin
http://127.0.0.1:8000/admin

criar usuariosuper
python manage.py createsuperuser
lucas
123456789

##############################################################################################
quero que a tabela empresa apareça no superadmin
PSW-django\empresarios\admin.py

from .models import Empresas

admin.site.register(Empresas)

##############################################################################################
Para passar parametros do banckende para o frontend 

PSW-django\empresarios\views.py
from .models import Empresas

vai busar no models o Empresas e renderizar no html
def cadastrar_empresa(request):
    if request.method == "GET":
        return render(request, 'cadastrar_empresa.html', {'tempo_existencia':Empresas.tempo_existencia_choices})

PSW-django\empresarios\templates\cadastrar_empresa.html

<select name="tempo_existencia" class="form-select">
    {% for te in tempo_existencia %}
        <option value="{{te.0}}">{{te.1}}</option>
    {% endfor %}
</select>
##############################################################################################
Bloquear para quem não tem usuario


##############################################################################################

Fazer verificações no PSW-django\empresarios\views.py

## para validar se está logado
if not request.user.is_authenticated:
    return redirect('/usuarios/logar')


if request.method == "GET":
    # para buscar na BD e só trazer a empresa do usuario logado
    empresas = Empresas.objects.filter(user=request.user)
    return render(request, 'listar_empresas.html')
##########################################################################################
Criar URL dinamica - coloca parametros dentro da URL
PSW-django\empresarios\urls.py
path('empresa/<int:id>', views.empresa, name="empresa")

e no PSW-django\empresarios\views.py
chama  def empresa(request, id):

no PSW-django\empresarios\templates\listar_empresas.html
chama o href
td class="linha"><a href="/empresarios/empresa/{{empresa.id}}

fazer de uma forma melhor 
href="{% url 'empresa' empresa.id %}" 
##########################################################################################
Para upar documento 
PSW-django\empresarios\models.py

class Documento(models.Model):
    empresa = models.ForeignKey(Empresas, on_delete=models.DO_NOTHING)
    titulo = models.CharField(max_length=30)
    arquivo = models.FileField(upload_to="documentos")
    
    def __str__(self):
        return self.titulo

Para novo model seja criado tem que dar o comando 

python manage.py makemigrations
python manage.py migrate

PSW-django\empresarios\admin.py
admin.site.register(Documento)

##########################################################################################
Para mostar o documento
PSW-django\empresarios\views.py
    if request.method == "GET":
     # para lisar os documentos
     documentos = Documento.objects.filter(empresa=empresa)
     return render(request, 'empresa.html', {'empresa': empresa, 'documentos': documentos})

 PSW-django\empresarios\templates\empresa.html    

